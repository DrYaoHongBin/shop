<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"
>
    <generatorConfiguration>
    <!--导入属性配置 -->

    <!--指定特定数据库的jdbc驱动jar包的位置,这个元素的作用是将MBG运行时需要用到的jar包(或zip格式)添加到classpath下,般在项目中使用的时候，
    classpath下面都有JDBC驱动，因此从项目中启动的时候不需要配置该项
    <classPathEntry location="D:\mysql-jar\mysql-connector-java-5.1.14-bin.jar"/>。-->

    <context id="default" targetRuntime="MyBatis3"> <!--targetRuntime此属性用于指定生成的代码的运行时环境,默认值是MyBatis3-->


        <!-- optional，旨在创建class时，对注释进行控制 -->
        <commentGenerator>
            <property name="suppressDate" value="true" />
        </commentGenerator>

        <!--jdbc的数据库连接 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://localhost:3306/shop?useUnicode=true&amp;characterEncoding=utf-8" userId="root" password="123456">
        </jdbcConnection>

        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->
        <javaTypeResolver >
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类
            targetPackage     指定生成的model生成所在的包名
            targetProject     指定在该项目下所在的路径,使用的是文件系统的绝对路径
        -->
        <javaModelGenerator targetPackage="com.shop.model.order" targetProject="D:/IdeaProjects/shop/src/main/java">
            <!-- 是否对model添加 构造函数 -->
            <property name="constructorBased" value="true"/>

            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->
            <property name="enableSubPackages" value="false"/>

            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>

        </javaModelGenerator>

        <!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->
        <sqlMapGenerator targetPackage="com.shop.dao.order" targetProject="D:/IdeaProjects/shop/src/main/java">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>


        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码
                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象
                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象
                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口
        -->
        <!--只能配置一个，不配置这个不会生成Mapper接口，XMLMAPPER:所有的方法都在XML中，接口调用依赖XML文件（其他的类型还有注解与注解和XML混合的）-->
        <javaClientGenerator targetPackage="com.shop.dao.order" targetProject="D:/IdeaProjects/shop/src/main/java" type="XMLMAPPER">
            <property name="enableSubPackages" value=""/>
            <!--
                    定义Maper.java 源代码中的ByExample() 方法的可视性，可选的值有：
                    public;
                    private;
                    protected;
                    default
                    注意：如果 targetRuntime="MyBatis3",此参数被忽略
             -->
            <property name="exampleMethodVisibility" value=""/>
            <!--
                                           方法名计数器
              Important note: this property is ignored if the target runtime is MyBatis3.
             -->
            <property name="methodNameCalculator" value=""/>

            <!--
                                                为生成的接口添加父接口
             -->
            <property name="rootInterface" value=""/>

        </javaClientGenerator>

        <!--schema:数据库的schema,可以使用SQL通配符匹配。如果设置了该值，生成SQL的表名会变成如schema.tableName的形式-->
        <!-- schema即为数据库名 tableName为对应的数据库表 domainObjectName是要生成的实体类 enable*ByExample
            是否生成 example类   -->
        <!--只有配置的才会生成实体类和其他文件-->
        <table schema="shop" tableName="shop_cart" domainObjectName="Cart" enableCountByExample="true"
               enableDeleteByExample="true" enableSelectByExample="true"
               enableUpdateByExample="true"/>



    </context>
</generatorConfiguration>